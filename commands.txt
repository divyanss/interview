## M5-02
## The example Pod YAML file used in this video clip is provided below

kubectl get nodes
kubectl create -f pod.yml
kubectl get pods
kubectl describe pods

## M5-03
## The example Replicaton Controller YAML file used in this video clip is provided below

kubectl get pods -o wide
kubectl get pods/hello-pod
kubectl get pods --all-namespaces

kubectl delete pods/hello-pod

kubectl create -f rc.yml
kubectl get rc -o wide
kubectl describe rc
kubectl apply -f rc.yml

kubectl get rc
kubectl get pods



## Sample Pod YAML file used in example (called pod.yml in video):

apiVersion: v1
kind: Pod
metadata:
  name: hello-pod
spec:
  containers:
  - name: hello-ctr
    image: nigelpoulton/pluralsight-docker-ci:latest
    ports:
    - containerPort: 8080

## Sample Replication Controller YAML file used in example (called rc.yml in video):
apiVersion: v1
kind: ReplicationController
metadata:
  name: hello-rc
spec:
  replicas: 5
  selector:
    app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-ctr
        image: nigelpoulton/pluralsight-docker-ci:latest
        ports:
        - containerPort: 8080


=================== M6-03
### Wrapping the hello-rc Replication Controller in a Service - the iterative way

$ kubectl expose rc hello-rc --name=hellosvc --target-port=8080 --type=NodePort   # mypod-rc 

$ kubectl describe svc hellosvc

to find the IP of the minikube - minikube ip 

=================== M6-04
### Wrapping the hello-rc Replication Controller in a Service - the iterative way

### The following commands get the current list of Services and then delete the Service called "hello-svc"
$ kubectl get svc
$ kubectl delete svc hello-svc

### The following commands list the "app" label attached to all running Pods and then print the contents of the "svc.yml" manifest file to the screen
$ kubectl describe pods | grep app
$ cat svc.yml

### The following command deploys a new Service from the "svc.yml". The YAML file is shown at the bottom of this document
$ kubectl create -f svc.yml

### The following commands list all running Services and then describe the Service called "hello-svc"
$ kubectl get svc
$ kubectl describe svc hello-svc				

### The following commands list all Endpoint objects on the cluster and then describes the Endpoint object called "hello-svc"
kubectl get ep
kubectl describe ep hello-svc

### The following is the "svc.yml" file used in the module
apiVersion: v1
kind: Service
metadata:
  name: hello-svc
  labels:
    app: hello-world
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 30001
    protocol: TCP
  selector:
    app: hello-world

#### m7-03
kubectl delete rc hello-rc
kubectl get pods

kubectl describe svc hello-svc

vim deploy.yml

kubectl create deployment

kubectl describe deploy hello-deploy

kubectl get rs

kubectl describe rs 


#### m7-04
kubectl apply -f deploy.yml --record

kubectl rollout status deployments hello-deploy

kubectl get deploy hello-deploy

kubectl rollout history deployments hello-deploy

kubectl get rs

kubectl describe deploy hello-deploy

kubectl rollout undo deployment hello-deploy --to-revision=1

kubectl get deploy

kubectl rollout status deployments hello-deploy


################# Final deployment YAML file used
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello-deploy
spec:
  replicas: 10
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-pod
        image: nigelpoulton/pluralsight-docker-ci:latest
        ports:
        - containerPort: 8080


	